import { IdamUtils } from '@hmcts/playwright-common';
import { APIRequestContext, request } from '@playwright/test';
import { AxiosResponse } from 'axios';

import { getAccessToken } from '../helpers/caseCreaterHelper';

import { urlConfig } from './urls';

export class CaseHelperUtils {
  constructor(
    private caseType: string = 'A58',
    private serviceToken: string = process.env.IDAM_S2S_TOKEN || '',
    private idamUtils: IdamUtils
  ) {}

  private async createApiContext(): Promise<APIRequestContext> {
    return request.newContext({});
  }

  /**
   * Method to create blank case
   * @param userId
   * @param {string} userEmail citizen user email
   * @param {string} userPassword citizen user email
   * @param {string} caseData case data to create case with (name, email)
   */
  async createCase(
    userId: string,
    userEmail: string,
    userPassword: string,
    caseData: Record<string, never>
  ): Promise<string> {
    const eventId = 'citizen-create-application' as string;
    // auth token generated by user who wants to create case, this should be passed in to createCase method
    const authToken = await this.idamUtils.generateIdamToken({
      grantType: 'password',
      username: userEmail as string,
      password: userPassword as string,
      clientId: process.env.CCD_DATA_STORE_CLIENT_ID as string,
      clientSecret: process.env.IDAM_SECRET as string,
      scope: 'openid profile roles',
    });
    console.log(authToken);
    process.env.CREATE_CASE_TOKEN = authToken;
    const eventToken: string = await this.getEventToken(userId, authToken, eventId);
    const accessToken: AxiosResponse<string> | undefined = await getAccessToken(userEmail, userPassword);
    const context = await this.createApiContext();
    console.log(eventToken);
    const response = await context.post(`/case-types/${this.caseType}/cases`, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
        ServiceAuthorization: this.serviceToken,
        Accept: 'application/json',
        'Content-Type': 'application/json',
        experimental: 'true',
      },
      data: {
        data: caseData,
        event: { id: eventId },
        event_token: eventToken,
      },
    });

    if (!response.ok()) {
      throw new Error(`Failed to create case: ${response.status()}`);
    }

    const json = await response.json();
    json.data.status = json.state;
    return json;
  }

  /**
   * Function to retrieve the event for a given event ID.
   */
  private async getEventToken(userId: string, bearerToken: string, eventId: string): Promise<string> {
    let eventToken = '';
    const context = await this.createApiContext();
    //<ccd-data-store-api>/{party}/{uid}/jurisdictions/{jid}/case-types/{ctid}/cases/{caseid}/event-triggers/DEFENDANT_RESPONSE_SPEC/token
    const url = `${urlConfig.ccd_data_api_url}/case-types/A58/event-triggers/citizen-create-application`;
    //const url: string = `${urlConfig.ccd_data_api_url}/citizens/${userId}/jurisdictions/ADOPTION/case-types/${this.caseType}/event-triggers/${eventId}/token`;
    const response = await context.get(url, {
      headers: {
        Authorization: `Bearer ${bearerToken}`,
        'Content-Type': 'application/json',
        ServiceAuthorization: `Bearer ${this.serviceToken}`,
      },
    });
    if (response.ok()) {
      const responseBody = await response.json();
      if (responseBody) {
        eventToken = responseBody.token;
      } else {
        throw new Error('Failed to get event token');
      }
    } else {
      throw new Error(
        `Failed to get event token for event: ${eventId}: Received the following response: ${response.status()} - ${response.statusText()}`
      );
    }
    return eventToken;
  }

  async triggerEvent(
    userId: string,
    caseId: string,
    eventId: string,
    eventData: Record<string, never>
  ): Promise<string> {
    const context = await this.createApiContext();
    const token = await this.getEventToken(userId, process.env.CREATE_CASE_TOKEN as string, eventId);
    const response = await context.post(`/cases/${caseId}/events`, {
      headers: {
        Authorization: `Bearer ${process.env.CREATE_CASE_TOKEN}`,
        ServiceAuthorization: this.serviceToken,
        Accept: 'application/json',
        'Content-Type': 'application/json',
        experimental: 'true',
      },
      data: {
        event: { id: eventId },
        data: eventData,
        event_token: token,
      },
    });
    if (!response.ok()) {
      throw new Error(`Failed to trigger event "${eventId}": ${response.status()}`);
    }
    return response.json();
  }

  async triggerMultipleEvents(
    userId: string,
    caseId: string,
    events: { eventName: string; eventData: Record<string, never> }[]
  ): Promise<string[]> {
    const results: string[] = [];
    for (const { eventName, eventData } of events) {
      const result = await this.triggerEvent(userId, caseId, eventName, eventData);
      results.push(result);
    }
    return results;
  }
}
