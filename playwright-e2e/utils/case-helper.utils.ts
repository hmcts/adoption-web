import { IdamUtils } from '@hmcts/playwright-common';
import { APIRequestContext, request } from '@playwright/test';
import Axios, { AxiosResponse } from 'axios';
import { authenticator } from 'otplib';
import { getAccessToken } from '../helpers/caseCreaterHelper';

import { urlConfig } from './urls';
import { getServiceAuthToken } from '../../src/main/app/auth/service/get-service-auth-token';

export class CaseHelperUtils {
  constructor(
    private caseType: string = 'A58',
    private idamUtils: IdamUtils
  ) {}

  private async createApiContext(): Promise<APIRequestContext> {
    return request.newContext({});
  }

  /**
   * Method to create blank case
   * @param userId
   * @param {string} userEmail citizen user email
   * @param {string} userPassword citizen user email
   * @param {string} caseData case data to create case with (name, email)
   */
  async createCase(
    userId: string,
    userEmail: string,
    userPassword: string,
    caseData: Record<string, string>
  ): Promise<string> {
    const eventId = ' ' as string;
    // auth token generated by user who wants to create case, this should be passed in to createCase method
    const authToken = await this.idamUtils.generateIdamToken({
      grantType: 'password',
      username: userEmail as string,
      password: userPassword as string,
      clientId: 'adoption-web',
      clientSecret: process.env.IDAM_SECRET as string,
      scope: 'openid profile roles',
    });
    console.log(authToken);
    process.env.CREATE_CASE_TOKEN = authToken;
    const eventToken: string = await this.getEventToken(userId, authToken, eventId);
    const accessToken: AxiosResponse<string> | undefined = await getAccessToken(userEmail, userPassword);
    const context = await this.createApiContext();
    let serviceToken = getServiceAuthToken();
    console.log(eventToken);
    const response = await context.post(`/case-types/${this.caseType}/cases`, {
      headers: {
        Authorization: `Bearer ${accessToken}`,
        ServiceAuthorization: serviceToken,
        Accept: 'application/json',
        'Content-Type': 'application/json',
        experimental: 'true',
      },
      data: {
        data: caseData,
        event: { id: eventId },
        event_token: eventToken,
      },
    });

    if (!response.ok()) {
      throw new Error(`Failed to create case: ${response.status()}`);
    }

    const json = await response.json();
    json.data.status = json.state;
    return json;
  }

  private async getServiceToken(): Promise<string> {
   // logger.info('Refreshing service auth token');
    let token: string = '';
    const url = `${urlConfig.ccd_data_api_url}/case-types/A58/event-triggers/citizen-create-application`;
    const microservice: string = 'adoption_web';
    const secret: string = '';
    const oneTimePassword = authenticator.generate(secret);
    const body = { microservice, oneTimePassword };

    try {
      const response = await Axios.post(url, body);
      //logger.info('Service auth token refreshed');
      token = response.data;
    } catch (err) {
      console.error('Error in refreshing service auth token ', err.message, err.response?.status, err.response?.data);
    }

    return token;
  };

  // private async getEventToken1(userId: string, bearerToken: string, eventId: string): Promise<string> {
  //   let s2sAuthRequest = await Axios.post(`http://rpe-service-auth-provider-aat.service.core-compute-aat.internal/lease`, { "microservice": 'adoption_web', "oneTimePassword": oneTimePassword }, { httpsAgent: agent });
  //   s2sAuth = s2sAuthRequest.data;
  //   const oneTimePassword = otplib.authenticator.generate(s2sSecret);
  //   let createdAccount = await Axios.post(`https://idam-api.aat.platform.hmcts.net/testing-support/accounts`, newUser, { httpsAgent: agent });
  //   let idamData = `username=${newUser.email}&password=${newUser.password}&client_id=${clientId}&client_secret=${idamSecret}&grant_type=password&redirect_uri=${callbackUrl}&scope=openid%20profile%20roles`;
  //   let idamAccess = await Axios.post(`${idamUrl}/o/token`, idamData, { httpsAgent: agent });
  //   let idamToken = idamAccess.data.access_token;
  //
  //   let axiosClient = Axios.create({
  //     baseURL: url,
  //     headers: {
  //       Authorization: 'Bearer ' + idamToken,
  //       ServiceAuthorization: s2sAuth,
  //       experimental: 'true',
  //       Accept: '*/*',
  //       'Content-Type': 'application/json',
  //     },
  //     httpsAgent: new https.Agent({
  //       rejectUnauthorized: false
  //     })
  //   });
  //
  //   let event = { id: "citizen-create-application" };
  //
  //   data = {
  //     applicant1FirstName: "Will",
  //     applicant1LastName: "Smith",
  //     applicant1Email: "willsmith@mailinator.com",
  //   };
  //
  //   tokenRes = await axiosClient.get(`/case-types/A58/event-triggers/citizen-create-application`);
  //   token = tokenRes.data.token;
  // }

  /**
   * Function to retrieve the event for a given event ID.
   */
  private async getEventToken(userId: string, bearerToken: string, eventId: string): Promise<string> {
    let eventToken = '';
    let serviceToken = await this.getServiceToken();
    const context = await this.createApiContext();
    //<ccd-data-store-api>/{party}/{uid}/jurisdictions/{jid}/case-types/{ctid}/cases/{caseid}/event-triggers/DEFENDANT_RESPONSE_SPEC/token
    const url = `${urlConfig.ccd_data_api_url}/case-types/A58/event-triggers/citizen-create-application`;
    //const url: string = `${urlConfig.ccd_data_api_url}/citizens/${userId}/jurisdictions/ADOPTION/case-types/${this.caseType}/event-triggers/${eventId}/token`;

    const response = await context.get(url, {
      headers: {
        Authorization: `Bearer ${bearerToken}`,
        'Content-Type': 'application/json',
        ServiceAuthorization: `Bearer ${serviceToken}`,
      },
    });
    if (response.ok()) {
      const responseBody = await response.json();
      if (responseBody) {
        eventToken = responseBody.token;
      } else {
        throw new Error('Failed to get event token');
      }
    } else {
      throw new Error(
        `Failed to get event token for event: ${eventId}: Received the following response: ${response.status()} - ${response.statusText()}`
      );
    }
    return eventToken;
  }

  async triggerEvent(
    userId: string,
    caseId: string,
    eventId: string,
    eventData: Record<string, never>
  ): Promise<string> {
    const context = await this.createApiContext();
    const token = await this.getEventToken(userId, process.env.CREATE_CASE_TOKEN as string, eventId);
    let serviceToken = await this.getServiceToken();
    const response = await context.post(`/cases/${caseId}/events`, {
      headers: {
        Authorization: `Bearer ${process.env.CREATE_CASE_TOKEN}`,
        ServiceAuthorization: serviceToken,
        Accept: 'application/json',
        'Content-Type': 'application/json',
        experimental: 'true',
      },
      data: {
        event: { id: eventId },
        data: eventData,
        event_token: token,
      },
    });
    if (!response.ok()) {
      throw new Error(`Failed to trigger event "${eventId}": ${response.status()}`);
    }
    return response.json();
  }

  async triggerMultipleEvents(
    userId: string,
    caseId: string,
    events: { eventName: string; eventData: Record<string, never> }[]
  ): Promise<string[]> {
    const results: string[] = [];
    for (const { eventName, eventData } of events) {
      const result = await this.triggerEvent(userId, caseId, eventName, eventData);
      results.push(result);
    }
    return results;
  }
}
