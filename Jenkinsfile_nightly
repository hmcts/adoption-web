#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 8 * * 1-5')]),
  parameters([
    string(name: 'FRONTEND_URL', defaultValue: 'https://adoption-web.aat.platform.hmcts.net/', description: 'The URL you want to run tests against'),
    string(name: 'IDAM_TOKEN_URL', defaultValue: 'https://idam-web-public.aat.platform.hmcts.net/o/token', description: 'The URL you want to use idam user creation'),
    string(name: 'FUNCTIONAL_TESTS_WORKERS',
      defaultValue: '2',
      description: 'Number of workers running functional tests'),
  ])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.AppPipelineDsl

def type = "nodejs"
def product = "adoption"
def component = "web"

// SAUCELABS config - configured on Jenkins
env.SAUCE_USERNAME = 'username'
env.SAUCE_ACCESS_KEY = 'privatekey'
env.SAUCE_TUNNEL_IDENTIFIER = 'reformtunnel'

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  'adoption-${env}'    :[
    secret('idam-secret', 'IDAM_SECRET'),
    secret('idam-system-user-password', 'TEST_PASSWORD'),
    secret('citizen-user', 'CITIZEN_USERNAME'),
    secret('citizen-password', 'CITIZEN_PASSWORD'),
    secret('adoption-pcq-token', 'PCQ_TOKEN'),
    secret('endpoints', 'ENDPOINTS'), 
    secret('adoption-web-auth-token', 'AUTH_TOKEN'),
    secret('idam-token-url', 'IDAM_TOKEN_URL')
  ],
  's2s-${env}': [
    secret('microservicekey-adoption-web', 'SERVICE_AUTH_SECRET')
  ]
]

def pipelineConf = new AppPipelineConfig()
pipelineConf.vaultSecrets = secrets

withNightlyPipeline(type, product, component) {
  env.TEST_URL = "https://adoption-web.aat.platform.hmcts.net/"
  env.ADOP_WEB_URL = params.FRONTEND_URL
//  enableCrossBrowserTest(['chrome','microsoft'])
  enableCrossBrowserTest(90)
  enableFullFunctionalTest(120)
  loadVaultSecrets(secrets)
  enablePactAs([ AppPipelineDsl.PactRoles.CONSUMER ])
  enableFortifyScan()
  enableSecurityScan()

  afterAlways('test') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'coverage/**/*'
  }

  before('crossBrowserTest') {

  }

  afterAlways('crossBrowserTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('fullFunctionalTest') {
    env.PARALLEL_CHUNKS = params.FUNCTIONAL_TESTS_WORKERS
  }

afterAlways('fullFunctionalTest') {
        stage('Playwright Tests Nightly') {
            try {
                yarnBuilder.yarn('test:functional-nightly')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'playwright-report',
                    reportFiles: 'index.html',
                    reportName: 'Playwright UI Functional Test Report'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/functionalTest/**/*'
            }
        }
        stage('Playwright Accessibility Tests Nightly') {
            try {
                yarnBuilder.yarn('test:accessibility-nightly')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: "playwright-report",
                    reportFiles: 'index.html',
                    reportName: 'Playwright Accessibility Functional Test Report'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/functionalTest/**/*'
            }
        }
    }

  afterAlways('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }
}
