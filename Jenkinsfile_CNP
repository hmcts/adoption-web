#!groovy

@Library('Infrastructure')

import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.AppPipelineDsl

def type = 'nodejs'
def product = 'adoption'
def component = 'web'


static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def secrets = [
  'adoption-${env}': [
    secret('idam-secret', 'IDAM_SECRET'),
    secret('citizen-user', 'CITIZEN_USERNAME'),
    secret('citizen-password', 'CITIZEN_PASSWORD'),
    secret('adoption-pcq-token', 'PCQ_TOKEN'),
    secret('endpoints', 'ENDPOINTS'),
    secret('idam-system-user-password', 'TEST_PASSWORD'),
    secret('adoption-web-auth-token', 'AUTH_TOKEN'),
    secret('idam-token-url', 'IDAM_TOKEN_URL'),
    secret('idam-citizen-user-password', 'IDAM_CITIZEN_USER_PASSWORD'),
    secret('idam-testing-support-users-url', 'IDAM_TESTING_SUPPORT_USERS_URL')

  ],
  's2s-${env}': [
    secret('microservicekey-adoption-web', 'SERVICE_AUTH_SECRET')
  ]
]

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)
def branchesToSync = ['demo', 'ithc', 'perftest']

def pipelineConf = new AppPipelineConfig()
pipelineConf.vaultSecrets = secrets

env.IDAM_URL = 'https://idam-api.aat.platform.hmcts.net'

withPipeline(type, product, component) {
  enableAksStagingDeployment()
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)
  enableSlackNotifications('#adoption-tech')

  loadVaultSecrets(secrets)

  enablePactAs([ AppPipelineDsl.PactRoles.CONSUMER ])

  before('test') {
    setupSecretsForIntegrationTests(pipelineConf)
  }

  onMaster {
    env.PACT_TAG = 'master'
  }

  afterAlways('build') {
    yarnBuilder.yarn('build')
  }

  afterAlways('test') {
    yarnBuilder.yarn('test:integration')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'coverage/**/*'
    // teardown test secrets
    env.AUTH_TOKEN = ''
  }

  before('functionalTest:preview') {
    env.ADOP_WEB_URL = "https://adoption-web-pr-${CHANGE_ID}.preview.platform.hmcts.net/"
    env.PARALLEL_CHUNKS = 2
    env.IDAM_TOKEN_URL = "${IDAM_TOKEN_URL}"
    env.IDAM_CITIZEN_USER_PASSWORD = "${IDAM_CITIZEN_USER_PASSWORD}"
    env.IDAM_TESTING_SUPPORT_USERS_URL = "${IDAM_TESTING_SUPPORT_USERS_URL}"
  }

  afterAlways('functionalTest:preview') {
    try {
      yarnBuilder.yarn('test:functional')
    } catch (Error) {
      unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
    } finally {
      publishHTML([
        allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'playwright-report',
        reportFiles: 'index.html',
        reportName: 'Playwright Preview Functional Test Report'
      ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/functionalTest/**/*'
    }
  }

  before('smoketest:preview') {
    env.ADOP_WEB_URL = "https://adoption-web-pr-${CHANGE_ID}.preview.platform.hmcts.net/"
    env.PARALLEL_CHUNKS = 2
    env.IDAM_TOKEN_URL = "${IDAM_TOKEN_URL}"
    env.IDAM_CITIZEN_USER_PASSWORD = "${IDAM_CITIZEN_USER_PASSWORD}"
    env.IDAM_TESTING_SUPPORT_USERS_URL = "${IDAM_TESTING_SUPPORT_USERS_URL}"
  }

  afterAlways('smoketest:preview') {
    try {
      yarnBuilder.yarn('test:smoke')
    } catch (Error) {
      unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
    } finally {
      publishHTML([
        allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'playwright-report',
        reportFiles: 'index.html',
        reportName: 'Playwright Preview Smoke Test Report'
      ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/functionalTest/**/*'
    }
  }

  before('smoketest:aat') {
    env.ADOP_WEB_URL = "https://adoption-web-staging.aat.platform.hmcts.net/"
    env.PCQ_TESTS_ENABLED = "false"
    env.PARALLEL_CHUNKS = 2
    env.IDAM_TOKEN_URL = "${IDAM_TOKEN_URL}"
    env.IDAM_CITIZEN_USER_PASSWORD = "${IDAM_CITIZEN_USER_PASSWORD}"
    env.IDAM_TESTING_SUPPORT_USERS_URL = "${IDAM_TESTING_SUPPORT_USERS_URL}"
  }

  afterAlways('smoketest:aat') {
    try {
      yarnBuilder.yarn('test:smoke')
    } catch (Error) {
      unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
    } finally {
      publishHTML([
        allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'playwright-report',
        reportFiles: 'index.html',
        reportName: 'Playwright Smoke Test Report'
      ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/functionalTest/**/*'
    }
  }

  before('functionalTest:aat') {
    env.ADOP_WEB_URL = "https://adoption-web-staging.aat.platform.hmcts.net/"
    yarnBuilder.yarn('test:functional:skip')
  }

  afterAlways('functionalTest:aat') {
    yarnBuilder.yarn('test:api')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'coverage/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }
}

def setupSecretsForIntegrationTests(pipelineConf) {
  withSubscription('nonprod') {
    withTeamSecrets(pipelineConf, 'aat') {
      env.AUTH_TOKEN = "${AUTH_TOKEN}"
    }
  }
}
